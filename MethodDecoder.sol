// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract DecodeMethod {
    // To see whats the params for a method. first 4 bytes is the method selector which cant be decode(sha256 trap door)

    // decodeString = 0xde7fe3bf00000000000000000000000027e611fd27b276acbd5ffd632e5eaebec9761e4000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000036fe0b1b21473c41c304caf056d5d34fd5591f05000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000003d09000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d54657374696e674465636f64650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045445444500000000000000000000000000000000000000000000000000000000
    // curveSwap = 0x3df021240000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000dcef33a6f838000
    function decodeString(bytes calldata _mid) public pure returns (address a, string memory b, string memory c, address d, uint256 e, uint256 f, uint256 g, bytes memory ans){
        (a, b, c, d, e, f, g) = abi.decode(_mid[4:], (address, string, string, address, uint256, uint256, uint256));
        ans = abi.encode(string(b));
    }

    function curveSwap(bytes calldata _mid) public pure returns (int128 i, int128 j, uint256 _dx, uint256 _min_dy) {
         (i, j, _dx, _min_dy) = abi.decode(_mid[4:], (int128, int128, uint256, uint256));
    }
}